overview-crypto-providers:
  headers:
    provider: Crypto Provider
    technology: Technology
    platforms: Supported platforms
    description: Description
  body:
    - provider: |
        **Cryptoki** (Cryptographic Token Interface)
      technology: |
        [PKCS#11](https://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/os/pkcs11-base-v2.40-os.html) version 2.40
      platforms: Windows, Linux
    - provider: |
        **KSP** (Key Storage Provider)
      technology: |
        [CNG](https://docs.microsoft.com/en-us/windows/win32/seccng/key-storage-and-retrieval) (Cryptographic API: Next Generation)
      platforms: Windows
    - provider: |
        **CSP** (Cryptographic Service Provider)
      technology: |
        [CAPI](https://docs.microsoft.com/en-us/windows/win32/seccrypto/cryptographic-service-providers) (CryptoAPI)
      platforms: Windows
      description: This API is deprecated, most tools now use KSP/CNG
    - provider: |
        **CTK** (CryptoTokenKit)
      technology: |
        [CTK extension](https://developer.apple.com/documentation/cryptotokenkit/)
      platforms: macOS

config-values:
  headers:
    setting: Setting (in JSON file)
    env: Environment variable
    default: Default Value
    description: Description
  body:
    - setting: "`OrganizationId`"
      env: "`SIGNPATH_ORGANIZATION_`&#8203;`ID`"
      default: (mandatory)
      description: The id of the organization to use
    - setting: "`ApiToken`"
      env: "`SIGNPATH_API_TOKEN`"
      default: (mandatory)
      description: |
        The API token for a CI or Interactive User (can be created in the “Users and Groups” UI). See below for options.
    - setting: "`TlsClientCertificate`"
      env: "`SIGNPATH_TLS_`&#8203;`CLIENT_CERTIFICATE`"
      default: (-)
      description: |
        Reference to a TLS/SSL client authentication certificate in the format `thumbprint:`&#8203;`$HexThumbprint` (optional, Windows only)
    - setting: "`ApiUrl`"
      env: "`SIGNPATH_API_URL`"
      default: "`https://`&#8203;`app.signpath.io/`&#8203;`Api`"
      description: |
        The SignPath API endpoint to use. Needs to be set if for self-hosted SignPath installations.
    - setting: "`HttpProxy`"
      env: "`http_proxy`"
      default: (-)
      description: |
        The address of an [HTTP (web) proxy](#http-proxy-config) (optional, not available on macOS).
    - setting: "`Timeouts.HttpRequest`"
      env: "`SIGNPATH_TIMEOUTS_`&#8203;`HTTP_REQUEST`"
      default: "`30`"
      description: |
        The timeout for the HTTP calls in seconds per attempt (not available on macOS).
    - setting: "`Timeouts.FirstRetryDelay`"
      env: "`SIGNPATH_TIMEOUTS_`&#8203;`FIRST_RETRY_DELAY`"
      default: "`1.16`"
      description: |
        The initial delay in seconds and maximum number of retries in case of failed API HTTP requests like timeouts or 503 (Service Unavailable) errors. The delay between the retries increases exponentially and sums up to a total delay time of 10 mins for the default values of 10 retries with 1.16 seconds initial delay.  (not available on macOS)
      _attributes: 
        description: { rowSpan: 2 }
    - setting: "`Timeouts.RetryCount`"
      env: "`SIGNPATH_TIMEOUTS_`&#8203;`RETRY_COUNT`"
      default: "`10`"
    - setting: "`Log.Console.Level`"
      env: "`SIGNPATH_LOG_CONSOLE_`&#8203;`LEVEL`"
      default: "`none`"
      description: The log level used for console logging. (not available on macOS)
    - setting: "`Log.File.Level`"
      env: "`SIGNPATH_LOG_FILE_LEVEL`"
      default: "`warning`"
      description: The log level used for file logging. (not available on macOS)
    - setting: "`Log.File.Directory`"
      env: "`SIGNPATH_LOG_FILE_`&#8203;`DIRECTORY`"
      default: (-)
      description: |
        The path to the folder where log files should be stored. Logging to files is disabled if no value is provided.
    - setting: "`Cryptoki.`&#8203;`DoNotFailOn`&#8203;`ReadWriteSessions`"
      env: "`SIGNPATH_CRYPTOKI_`&#8203;`DO_NOT_FAIL_ON_`&#8203;`READ_WRITE_SESSIONS`"
      default: "`false`"
      description: |
          Enables compatibility with Cryptoki / PKCS #11 clients which open sessions with read/write option (e.g. pkcs11-tool in version lower than 0.23)

config-api-token-options:
  headers:
    value: Value
    example: Example
  body:
    - value: Unencrpyted token
      example: "`AIk/65sl23lA1nVV/`&#8203;`pgSqk96SvHFs`&#8203;`Sw3xitmp5Qhr+F/`"
    - value: DPAPI-encrypted token (Windows only)
      example: "`encrypted:`&#8203;`AQAAANCMnd8BFdERjHoAwE/`&#8203;`Cl+sBAAA...`"
    - value: Registry path to DPAPI-encrypted token (Windows only)  
      example: "`registry:`&#8203;`HKEY_CURRENT_USER\\`&#8203;`SOFTWARE\\SignPath\\`&#8203;`MyEncryptedApiToken`"

cryptoki-supported-linux-distributions:
  headers:
    distro: Distribution
    version: Version
    comment: Comment
  body:
    - distro: Debian
      version: 11
    - distro: Ubuntu
      version: 20.04
      comment: Except [osslsigncode](#osslsigncode)
    - distro: RedHat
      version: 8 (latest minor)
    - distro: RedHat
      version: 9 (latest minor)

cryptoki-parameters:
  headers:
    parameter: Parameter
    value: Value for the SignPath Cryptoki Library
    description: Description
  body:
    - parameter: PIN
      value: "`CONFIG` or `<OrganizationId>:<ApiToken>`"
      description: |
        Either use `CONFIG` to use the values from the [configuration file or environment variables](/documentation/crypto-providers#crypto-provider-config-values), or directly specify a SignPath _Organization ID_ and _API token_ for the CI or Interactive User that was added as a submitter, separated by a colon (`:`)
    - parameter: Key ID
      value: "`<ProjectSlug>/`&#8203;`<SigningPolicySlug>`"
      description: |
        SignPath _Project_ slug and _Signing Policy_ slug, separated by a forward slash (`/`)

cryptoki-errors:
  headers:
    situation: Situation
    error: PKCS #11 error code
  body:
    - situation: Transient errors like HTTP timeouts or 503
      error: "`CKR_FUNCTION_FAILED`"
    - situation: Non-transient service errors (e.g. 500 Internal Server Error)
      error: "`CKR_DEVICE_ERROR`"
    - situation: User errors detected by service (4xx returned)
      error: "`CKR_ARGUMENTS_BAD`"
    - situation: Other unspecified errors (fall back)   
      error: "`CKR_GENERAL_ERROR`"

cryptoki-openssl-libp11-installation-paths:
  headers:
    distro: Distribution
    default_path: Default path
  body:
    - distro: Debian/Ubuntu w/ OpenSSL 1.1
      default_path: "`/usr/lib/x86_64-linux-gnu/engines-1.1/libpkcs11.so`"
    - distro: Debian/Ubuntu w/ OpenSSL 3.x
      default_path: "`/usr/lib/x86_64-linux-gnu/engines-3/libpkcs11.so`"
    - distro: RedHat w/ OpenSSL 1.1
      default_path: "`/usr/lib64/engines-1.1/libpkcs11.so`"
    - distro: RedHat w/ OpenSSL 3.x
      default_path: "`/usr/lib64/engines-3/libpkcs11.so`"

cryptoki-openssl-env:
  headers:
    env: Environment variable
    value: Value
    description: Description
  body:
    - env: "`OPENSSL_CONF`"
      value: "Path to `openssl-signpath.cnf` file"
      description: This variable tells OpenSSL to load the custom configuration file

cryptoki-openssl-invocation-params:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`-keyform`"
      value: "`engine`"
      description: Use the specified engine to access the key.
    - parameter: "`-engine`"
      value: "`pkcs11`"
      description: Use the _libp11_ engine specified in the `openssl-signpath.cnf` file.
    - parameter: "`-inkey`"
      value: "`pkcs11:id=<ProjectSlug>/`&#8203;`<SigningPolicySlug>;`&#8203;`type=private`"
      description: |
        A PKCS #11 URI including _Project_ and _Signing Policy_ slug, see also [Cryptoki parameters](#cryptoki-parameters).

cryptoki-osslsigncode-invocation-params:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`--pkcs11module`"
      value: "`/path/to/`&#8203;`libSignPath.Cryptoki.so`"
      description: Path to the SignPath Cryptoki library.
    - parameter: "`--key`"
      value: "`pkcs11:id=...`"
      description: |
        A PKCS #11 URI as shown in the example above including _Project_ and _Signing Policy_ slug and the "pin" value, see also [Cryptoki parameters](#cryptoki-parameters).
    - parameter: "`--certs`"
      value: "`certificate.pem`"
      description: Certificate of the used signing policy in PEM format.

cryptoki-pkcs11-tool-invocation-common-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`--module`"
      value: "`/path/to/`&#8203;`libSignPath.Cryptoki.so`"
      description: Path to the SignPath Cryptoki library.
    - parameter: "`--pin`"
      value: "`CONFIG` or `<OrganizationId>:<ApiToken>`"
      description: |
        See [PIN parameter](#cryptoki-parameters)

cryptoki-pkcs11-tool-invocation-signing-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`--mechanism`"
      value: "e.g. `RSA-PKCS-PSS`"
      description: |
        Use the `--list-mechanisms` argument to list all available mechanisms
    - parameter: "`--hash-algorithm`"
      value: "e.g. `SHA256`"
      description: |
        Only necessary for `RSA-PKCS-PSS` mechanism
    - parameter: "`--label`"
      value: "`<ProjectSlug>/`&#8203;`<SigningPolicySlug>`"
      description: |
        _Project_ and _Signing Policy_ slug, separated by a forward slash (`/`)
    - parameter: "`--input-file`"
      value: "`/path/to/hash.bin`"
      description: |
        The file containing a hash in _binary_ form

cryptoki-jarsigner-invocation-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`-storetype`"
      value: "`PKCS11`"
      description: Use a PKCS11 store for the signing operation
    - parameter: "`-providerClass`"
      value: "`sun.security.`&#8203;`pkcs11.SunPKCS11`"
      description: Use the SunPKCS11 provider for the signing operation
    - parameter: "`-keystore`"
      value: "`NONE`"
      description: Key is not loaded from a file
    - parameter: "`-providerArg`"
      value: "Path to `pkcs11.config`"
      description: The SunPKCS11 provider expects a path to the config file
    - parameter: "`-sigalg`"
      value: "`SHA256withRSA`, `SHA384withRSA`, `SHA512withRSA`, `SHA256withECDSA`, `SHA384withECDSA`, or `SHA512withECDSA`"
      description: Digest and signature algorithm
    - parameter: "`-storepass`"
      value: "`CONFIG` or `<OrganizationId>:<ApiToken>`"
      description: |
        See ["PIN" parameter](#cryptoki-parameters)
    - parameter: _keystore-alias_
      value: "`<ProjectSlug>/`&#8203;`<SigningPolicySlug>`"
      description: |
        _Project_ and _Signing Policy_ slug, separated by a forward slash (`/`)

macos-application-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`-config`"
      value: "`/path/to/config/file.json`"
      description: Path to config file.
    - parameter: "`-s`"
      value: "`$SigningPolicySlug`"
      description: If not specified, the certificates from all available signing policies will be loaded.
    - parameter: "`-p`"
      value: "`$ProjectSlug`"
      description: If not specified, the certificates from all available projects will be loaded.
    - parameter: "`-u`"
      value: "`$ApiUrl`"
      description: The base URL of the SignPath API, e.g. `https://app.signpath.io/`&#8203;`Api`
    - parameter: "`-o`"
      value: "`$OrganizationId`"
      description: The id of the organization to use.
    - parameter: "`-t`"
      value: "`$ApiToken`"
      description: The API token for a CI or Interactive User (can be created in the "Users and Groups" UI).

macos-codesign-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`-s`"
      value: "`$SigningIdentity`"
      description: |
        A descriptor of the code signing identity that is stored in the keychain by the SignPath CryptoTokenKit. Provide the common name (or a substring) of the certificate.

rest-api-parameters:
  headers:
    parameter: Parameter
    type: Type
    description: Description
  body:
    - parameter: "`$ApiUrl`"
      type: URL segment
      description: |
         The base URL of the SignPath API, e.g. `https://app.signpath.io/`&#8203;`Api` (default)
    - parameter: "`$OrganizationId`"
      type: URL segment
      description: |
        The id of the organization to use.
    - parameter: "`Authorization: Bearer $ApiToken`"
      type: Header
      description: |
        The API token for a CI or Interactive User (can be created in the "Users and Groups" UI).

rest-api-signing-request-fields:
  headers:
    name: Name
    description: Description
  body:
    - name: "`ProjectSlug`"
      description: The project slug to use.
    - name: "`SigningPolicySlug`"
      description: The signing policy slug to use.
    - name: "`IsFastSigningRequest`"
      description: |
        Use `true` to get the signature directly in the response. Otherwise you will get only a `SigningRequestId` in the response. See also [response description](#signing-request-response).
    - name: "`Artifact`"
      description: |
        A JSON document containing the the hash to sign and metadata. See [following section](#hash-signing-payload-json).

rest-api-payload-json:
  headers:
    prop: JSON property
    description: Description
  body:
    - prop: "`SignatureAlgorithm`"
      description: |
        For RSA certificates: `"RsaPkcs1"` for the PKCS #1 v1.5 padding mode, or `"RsaPss"` for PSS padding mode. For elliptic curve certificates: `Ecdsa`.
    - prop: "`RsaHashAlgorithm`"
      description: |
        The OID for used hash algorithm with the following allowed values: `"1.2.840.113549.2.5"` (MD5), `"1.3.14.3.2.26"` (SHA1), `"2.16.840.1.101.3.4.2.1"` (SHA-256), `"2.16.840.1.101.3.4.2.2"` (SHA-384), `"2.16.840.1.101.3.4.2.3"` (SHA-512). _Note that this property is only used for RSA certificates._
    - prop: "`Base64EncodedHash`"
      description: |
        The Base64 encoded hash value to sign. I.e. the result of the used `RsaHashAlgorithm`.
    - prop: "`Metadata`"
      description: |
        Can contain arbitrary metadata JSON values. We recommend to include `CreatingProcess` metadata with `CommandLine` and `User` as shown in the example above.

windows-csp-ksp-general-params:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: Crypto Provider
      value: "`SignPathKSP` or `SignPathCSP`"
      description: SignPath KSP (preferred) or CSP
    - parameter: Key container name
      value: "`<ProjectSlug>/`&#8203;`SigningPolicySlug>`"
      description: "_Project_ and _Signing Policy_ slug, separated by a forward slash (`/`)"
    - parameter: Certificate file
      value: Path to the x.509 certificate file
      description: Download the respective certificate file from SignPath

windows-csp-ksp-errors:
  headers:
    situation: Situation
    error: "KSP error result code resp. CSP `GetLastError()` code"
    _attributes: 
      situation: {style: "width: 50%"}
      error: {style: "width: 50%"}
  body:
    - situation: |
        Transient errors like HTTP timeouts or 503 (Service Unavailable) which still occur after the last retry
      error: |
        `NTE_DEVICE_NOT_READY` ("The device that is required by this cryptographic provider is not ready for use.") for errors without an HTTP status code. Otherwise, HTTP status code as an HRESULT in the `FACILITY_ITF`, e.g. `0x800401F7` for HTTP 503
    - situation: |
        Non-transient service errors (e.g. 500 Internal Server Error) 
      error: |
        HTTP status code as an HRESULT in the `FACILITY_ITF`, e.g. `0x800401F4` for HTTP 500
    - situation: |
        User errors detected by service (4xx returned)  
      error: |
        HTTP status code as an HRESULT in the `FACILITY_ITF`, e.g. `0x80040190` for HTTP 400
    - situation: |
        Other unspecified errors (fall back)  
      error: |
        `NTE_FAIL` (“An internal error occurred.”)

windows-signtool-parameters:
  headers:
    parameter: Parameter
    value: Value
    description: Description
  body:
    - parameter: "`/csp`"
      value: "`SignPathKSP` or `SignPathCSP`"
      description: SignPath KSP (preferred) or CSP
    - parameter: "`/kc`"
      value: "`<ProjectSlug>/`&#8203;`<SigningPolicySlug>`"
      description: |
        Key container name: _Project_ and _Signing Policy_ slug, separated by a forward slash (`/`)
    - parameter: "`/fd`"
      value: "`SHA256`, `SHA384` or `SHA512`"
      description: Digest (hashing) algorithm
    - parameter: "`/f`"
      value: Path to the certificate file
      description: Download the respective certificate file from SignPath